                  
                  **CLUSTERED INDEX: --Sorting based on key values
                                     --Each table has only one clustered index.
                                     --Clustered index use a special structured so-called B-tree (or binary tree) which enables searches,                          inserts, updates,and deletes in logarithmic amortized time.
                                     --SQL Server automatically creates a corresponding clustered index based on columns included in the 
                                     primary key.
                                     
                                     CREATE CLUSTERED INDEX index_name
                                     ON schema_name.table_name (column_list);
                                     
                  **NON-CLUSTERED INDEX
                                      --Sorts and stores data separately from the data rows in the table. It is a copy of selected columns.
                                      --A table may have one or more nonclustered indexes.
                                      --Each non-clustered index may include one or more columns of the table.
                                      --Similar to a clustered index, a nonclustered index uses the B-tree structure to organize its data.
                                      --Besides storing the index key values, the lead nodes also store row pointers.
                                      
                  **Column Store / Row Store Index 
                  Advantage for Data Analysis (Data WareHouse)--> Column_store Format
                  
                  
                  Row Store Index: daha çok yazma işlemlerinin yapıldığı databaselerde kullanılıyor.
                  
                  Column-Store Format: daha çok query çağırmanın yapıldığı databaselerde kullanılıyor.
                  
                  
                  
                  
                  --Advantages and Disadvantages of Indexing
                      **Advantages:
                          --Much better SELECT performance
                          --Quicky retrieve data
                          --Used for sorting
                          --Unique indexes guarantee
                          
                      **Disadvantages:
                          --INSERT, UPDATE and DELETE becomes slower.
                          --Take additional disk space.
                          
                      
                      --Unique Index: A unique index ensures the index key columns do not contain any duplicate values.
                          
                              One only NULL value in nullable column. --> Unique Constraint Unique Index
                              
                              
                      --DISABLE- ENABLE- DROP Indexes
                      
                          DISABLE INDEX:  ALTER INDEX index_name ON table_name DISABLE;
                          
                          ENABLE INDEX: ALTER INDEX index_name ON table_name REBUILD;
                          
                          DROP INDEX: DROP INDEX [IF EXISTS] index_name ON table_name;
                          
                          
                          
--Bu tablo için ayrı bir database oluşturmanız daha uygun olacaktır.
--Index'in faydalarının daha belirgin olarak görülmesi için bu şekilde bir tablo oluşturulmuştur.

--Önce tablonun çatısını oluşturuyoruz.

CREATE TABLE website_visitor
    (
    visitor_id int,
    first_name varchar(50),
    last_name varchar(50),
    phone_number bigint,
    city varchar(50)
    );
    
    
--Tabloya rastgele veri atıyoruz konumuz haricindedir, şimdilik varlığını bilmeniz yeterli.

DECLARE @i int=1
DECLARE @RAND AS INT
WHILE @i < 200000
BEGIN
    SET @RAND =  RAND()*81 
    INSERT website_visitor
        SELECT @i, 'visitor_name' + cast(@i as varchar(20)), 'visitor_surname' + cast(@i as varchar(20)),
        5326559632+ @i, 'city' + cast(@RAND as varchar(2))
    SET @i +=1
END;



--Tabloyu kontrol ediniz.

SELECT TOP 10 *
FROM website_visitor


--İstatistikleri (Process ve time) açıyoruz, bunu açmak zorunda  değilsiniz sadece yapılan işlemlerin detayını görmek için kullanıyoruz.

SET STATISTICS IO ON
SET STATISTICS TIME ON
   
   # bunu şimdi açtık çünkü yaptığımız işlemlerin arka taraftaki cost'una bakacağız.
   
   
--Herhangi bir index olmadan visitor_id'ye şart  verip tüm tabloyu çağırıyoruz.

SELECT *
FORM website_visitor
WHERE visitor_id = 100

--Execution plan'a baktığınızda Table Scan yani tüm tabloyu teker teker tüm değerler bakarak aradığını göreceksiniz.



--Visitor_id üzerinde bir index oluşturuyoruz.

CREATE CLUSTERED INDEX CLS_INX_1 ON website_visitor (visitor_id);


--Visitor_id'ye şart verip sadece visitor_id'yi çağırıyoruz.

SELECT visitor_id
FROM website_visitor
WHERE visitor_id = 100


--*Execution plan'a baktığımızda CLustered index seek yani sadece Clustered intex'te aranılan değeri B-Tree yöntemiyle bulup getirdiğini görüyoruz.


--Visitor-id'ye şart verip tüm tabloyu çağırıyoruz.

SELECT *
FROM website_visitor
WHERE visitor_id = 100


--*Execution Plan'a baktığımızda  CLustered  Index seek yaptığını görüyoruz.
--*Clustered Index tablodaki tüm bilgileri lead node'larda sakladığı için ayrıca bir yere gitmek ihtiyacı olmadan primary key bilgisiyle (clustered index) tüm bilgileri getiriyor.



--Peki farklı bir sütuna şart verirsek;

SELECT first_name
FROM website_visitor
WHERE first_name = 'visitor_name17'


--*Execution Plan' da Görüleceği üzere Clustered Index Scan yapıyor.
--*Dikkat edin Seek değil Scan. Aradığımız sütuna ait değeri clustered index' in leaf page' lerinde tutulan bilgilerde arıyor
--*Tabloda arar gibi, index yokmuşçasına.


--Yukarıdaki gibi devamlı sorgu atılan non-key bir attribute söz konusu ise;
--Bu şekildeki sütunlara clustered index tanımlayamayacağımız için NONCLUSTERED INDEX tanımlamamız gerekiyor.

--Non clustered index tanımlayalım ad sütununa
CREATE NONCLUSTERED INDEX ix_NoN_CLS_1 ON website_visitor (first_name);


--Ad sütununa şart verip kendisini çağıralım:

SELECT first_name
FROM
website_visitor
where
first_name = 'visitor_name17'


--Execution Plan' da Görüleceği üzere üzere aynı yukarıda visitor id'de olduğu gibi index seek yöntemiyle verileri getirdi.
--Tek fark NonClustered indexi kullandı.


--Peki ad sütunundan başka bir sütun daha çağırırsak ne olur?
--Günlük hayatta da ad ile genellikle soyadı birlikte sorgulanır.


SELECT first_name, last_name
FROM
website_visitor
where
first_name = 'visitor_name17'


--Execution Plan' da Görüleceği üzere burada ad ismine verdiğimiz şart için NonClustered index seek kullandı,
--Sonrasında soyad bilgisini de getirebilmek için Clustered index e Key lookup yaptı.
--Yani clustered index' e gidip sorgulanan ad' a ait primary key' e başvurdu
--Sonrasında farklı yerlerden getirilen bu iki bilgiyi Nested Loops ile birleştirdi.


--Bir sorgunun en performanslı hali idealde Sorgu costunun %100 Index Seek yöntemi ile getiriliyor olmasıdır!


--Şu demek oluyor ki, bu da tam olarak performans isteğimizi karşılamadı, daha performanslı bir index oluşturabilirim.

--Burada yapabileceğim, ad sütunu ile devamlı olarak birlikte sorgulama yaptığım sütunlara INCLUDE INDEX oluşturma işlemidir.
--Bunun çalışma mantığı;
--NonClustered index' te leaf page lerde sadece nonclustered index oluşturulan sütunun ve primary keyinin bilgisi tutulmaktaydı.
--Include index oluşturulduğunda verilen sütun bilgileri bu leaf page lere eklenmesi ve ad ile birlikte kolayca getirilmesi amaçlanmıştır.


--Include indexi oluşturalım:
Create unique NONCLUSTERED INDEX ix_NoN_CLS_2 ON website_visitor (first_name) include (last_name)


--ad ve soyadı ad sütununa şart vererek birlikte çağıralım
SELECT first_name, last_name
FROM
website_visitor
where
first_name = 'visitor_name17'

--Execution Plan' da Görüleceği üzere sadece Index Seek ile sonucu getirmiş oldu.


--soyad sütununa şart verip sadece kendisini çağırdığımızda 
--Kendisine tanımlı özel bir index olmadığı için Index seek yapamadı, ad sütunun indexinde tüm değerlere teker teker bakarak
--Yani Scan yöntemiyle sonucu getirdi.

SELECT last_name
FROM
website_visitor
where
last_name = 'visitor_surname10'

--Execution Plan' da Görüleceği üzere bize bir index tavsiyesi veriyor.

--İyi çalışmalar dilerim.